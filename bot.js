const { Telegraf, Markup, session } = require('telegraf')
const bsClient = require("brawlstars-api.js")
const fs = require('fs').promises

const botToken = '5515444698:AAFPG1Fm-acI6yHfjtvTht8vkza_orfAkx8'
const brawlToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6IjhhZTc5MmI1LWU1YmItNGE4YS04Yzg1LTQ4Nzg5N2M2NThhMiIsImlhdCI6MTY1ODY3NzMyNSwic3ViIjoiZGV2ZWxvcGVyL2FkMDY4Zjc0LWVhMjgtYjlkOC1hMjk3LWZiZjcwYzAxZWQ2OSIsInNjb3BlcyI6WyJicmF3bHN0YXJzIl0sImxpbWl0cyI6W3sidGllciI6ImRldmVsb3Blci9zaWx2ZXIiLCJ0eXBlIjoidGhyb3R0bGluZyJ9LHsiY2lkcnMiOlsiMzcuNDUuNDIuMjEyIl0sInR5cGUiOiJjbGllbnQifV19.-xzengUHCPQxIluEbty8cYFnm4yv0g3nFnHXck2qx2PijrL3o3h_ybhxJAK2iE6NtWS3V6nceLNKy_giuMW-vQ'

const chatId = -1001690657208
// const myBrawlTag = '#22LPR8PG2'

const bot = new Telegraf(botToken)
const client = new bsClient(brawlToken)

bot.use(session())

const verifyButton = [
    [
        Markup.button.callback('‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', 'verifyButton'),
    ],
]

const correctAccount = [
    [
        Markup.button.callback('–î–∞, —ç—Ç–æ –º–æ–π –∞–∫–∫–∞—É–Ω—Ç', 'correctAccount'),
    ],
    [
        Markup.button.callback('–ù–µ–∞, —Ö–∑ –∫—Ç–æ —ç—Ç–æ', 'notCorrectAccount'),
    ]
]

const menuButtons = [
    [
        Markup.button.callback('üéØ –°–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å', 'createDuel'), Markup.button.callback('üìù –ò—Å—Ç–æ—Ä–∏—è –¥—É—ç–ª–µ–π', 'duelsHistory'),
    ],
    [
        Markup.button.callback('üèÜ –°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤', 'leaderList'),
    ]
]

bot.start(async ctx => {
    ctx.session = ctx.session || {}

    ctx.session.linkingAccount = true
    ctx.session.linkingId = ctx.update.message.from.id

    const messageInfo = ctx.update.message

    const file = await fs.readFile('files/verifyPlayers.txt', 'utf-8')

    const verifyPLayers = file.split('&()&')
    verifyPLayers.pop()

    const wasVerify = verifyPLayers.find(el => {
        const creatorId = el.split('/')[0]
            
        return messageInfo.from.id === +creatorId
    })

    if (wasVerify) {
        await ctx.telegram.sendMessage(messageInfo.from.id, `–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é:`, {
            parse_mode: 'Markdown', 
            reply_markup: { keyboard: menuButtons, resize_keyboard: true, }
        })

        ctx.session.linkingAccount = false
    } else {
        if (messageInfo.chat.id !== chatId) {
            await ctx.telegram.sendMessage(messageInfo.from.id, 'üëã')
            await ctx.telegram.sendMessage(messageInfo.from.id, `*–ü—Ä–∏–≤–µ—Ç, ${messageInfo.from.first_name}!*\n\n–î–∞–≤–∞–π –ø—Ä–∏–≤—è–∂–µ–º —Ç–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n\n–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Ç–µ–≥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ _#XXXXXX_ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–±—è –≤ –¥—Ä—É–∑—å—è.`, {
                parse_mode: 'Markdown'
            })

            ctx.session.verifyInProcess = true
        }
    }
})

bot.on('inline_query', async ctx => {
    ctx.session = ctx.session || {}

    const file = await fs.readFile('files/creators.txt', 'utf-8')

    const creatorsArray = file.split(' ')
    creatorsArray.pop()

    const correctCreator = creatorsArray.find(el => ctx.update.inline_query.from.id === +el)

    if (correctCreator) {
        let wins

        const fileWithLeaders = await fs.readFile('files/top.txt', 'utf-8')

        const leadersArray = fileWithLeaders.split(' ')
        leadersArray.pop()

        let correctLeader = leadersArray.find(el => {
            const Id = el.split('/')[1]
                
            return ctx.update.inline_query.from.id === +Id
        })

        if (correctLeader) {
            wins = correctLeader.split('/')[0]
        } else {
            wins = 0
        }

        const fileWithVerifyPlayers = await fs.readFile('files/verifyPlayers.txt', 'utf-8')

        const array = fileWithVerifyPlayers.split('&()&')
        array.pop()

        let correctProfile = array.find(el => {
            const Id = el.split('/')[0]
                
            return ctx.update.inline_query.from.id === +Id
        })

        let wasVerify = correctProfile.split('/')

        let string = JSON.parse(wasVerify[1])



        const duelButtons = [
            [
                Markup.button.callback('–ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤', `acceptDuelBtn/${ctx.update.inline_query.from.id}`)
            ],
        ]

        const results = [
            {
                type: 'article',
                id: '3',
                title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –¥—É—ç–ª—å',
                description: '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –¥—É—ç–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç',
                input_message_content: {
                    message_text: `–ì–æ –¥—É—ç–ª—å, —è —Å–æ–∑–¥–∞–ª\n\n–ù–∏–∫: *${string.name}*\n–ö—É–±–∫–æ–≤: *${string.trophies}*üèÜ\n–î—É—ç–ª–µ–π –≤—ã–∏–≥—Ä–∞–Ω–æ: *${wins}*`,
                    parse_mode: 'Markdown'
                },
                reply_markup: { inline_keyboard: duelButtons },
                thumb_url: 'https://clashofclans-fun.com/wp-content/uploads/2022/01/unnamed.jpg',
            }
        ]

        ctx.answerInlineQuery(results, {
            cache_time: 0,
        })
    } else {
        const fileWithLeaders = await fs.readFile('files/top.txt', 'utf-8')
        const fileWithVerifyPLayers = await fs.readFile('files/verifyPlayers.txt', 'utf-8')

        const verifyPlayersArray = fileWithVerifyPLayers.split('&()&')
        verifyPlayersArray.pop()

        const leadersArray = fileWithLeaders.split(' ')
        leadersArray.pop()

        const leadersList = leadersArray.sort()
        leadersList.reverse()

        const finalLeadersList = leadersList.slice(0, 10)

        let message = `*–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤:*\n\n`

        let number = 1

        finalLeadersList.forEach(el => {
            const playerInfo = el.split('/')

            const correctPlayer = verifyPlayersArray.find(el => {
                const id = el.split('/')[0]
                    
                return +playerInfo[1] === +id
            })

            const elements = correctPlayer.split('/')

            const infoObj = JSON.parse(elements[1])

            message = message + `${number}. [${infoObj.name}](tg://user?id=${playerInfo[1]}) ‚Äî ${playerInfo[0]}üèÖ\n`

            number = number + 1
        })

        const leaderList = [
            {
                type: 'article',
                id: '5',
                title: '–°–ø–∏—Å–æ–∫ –ª–∏–¥–µ—Ä–æ–≤',
                description: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥ –≤ –¥—É—ç–ª—è—Ö',
                input_message_content: {
                    message_text: message,
                    parse_mode: 'Markdown',
                },
                thumb_url: 'https://clashofclans-fun.com/wp-content/uploads/2022/01/unnamed.jpg',
            }
        ]

        const file = await fs.readFile('files/battleHistory.txt', 'utf-8')

        const battlesArray = file.split(' ')
        battlesArray.pop()

        const correctBattles = battlesArray.filter( el => el.includes(ctx.update.inline_query.from.id) )

        if (correctBattles[0] !== undefined) {
            const finalCorrectBattlesArray = correctBattles.slice(0, 5)

            let message1 = `*–ú–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥—É—ç–ª–∏:*\n\n`
            let number = 1

            finalCorrectBattlesArray.forEach(async (el, elIndex) => {
                const elements = el.split('/')

                const fileWithVerifyPlayers = await fs.readFile('files/verifyPlayers.txt', 'utf-8')

                const verifyPLayers = fileWithVerifyPlayers.split('&()&')
                verifyPLayers.pop()

                const wasVerify1 = verifyPLayers.find(el => {
                    const id = el.split('/')[0]
                        
                    return +elements[0] === +id
                })

                if (wasVerify1) {
                    const wasVerify2 = verifyPLayers.find(el => {
                        const id = el.split('/')[0]
                            
                        return +elements[1] === +id
                    })

                    if (wasVerify2) {
                        let obj1 = wasVerify1.split('/')[1]
                        let obj2 = wasVerify2.split('/')[1]

                        obj1 = JSON.parse(obj1)
                        obj2 = JSON.parse(obj2)

                        const winner = elements[2] === '1' ? obj1 : obj2

                        message1 = message1 + `${number}. [${obj1.name}](tg://user?id=${elements[0]}) vs [${obj2.name}](tg://user?id=${elements[1]}) ‚Äì –ø–æ–±–µ–¥–∏–ª ${winner.name}\n\n`
                        number = number + 1

                        if (finalCorrectBattlesArray.length - 1 === elIndex) {
                            const results = [
                                {
                                    type: 'article',
                                    id: '3',
                                    title: '–ò—Å—Ç–æ—Ä–∏—è –¥—É—ç–ª–µ–π',
                                    description: '–ü—Ä–∏—à–ª—ë—Ç –≤ —á–∞—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥—É—ç–ª–µ–π',
                                    input_message_content: {
                                        message_text: message1,
                                        parse_mode: 'Markdown',
                                    },
                                    thumb_url: 'https://clashofclans-fun.com/wp-content/uploads/2022/01/unnamed.jpg',
                                }
                            ]

                            results.push(leaderList[0])

                            const file = await  fs.readFile('files/verifyPlayers.txt', 'utf-8')

                            const playersArray = file.split('&()&')
                            playersArray.pop()

                            const wasVerify = playersArray.find(el => {
                                const creatorId = el.split('/')[0]
                                    
                                return ctx.update.inline_query.from.id === +creatorId
                            })

                            if (wasVerify) {
                                ctx.answerInlineQuery(results, {
                                    cache_time: 0,
                                    switch_pm_text: '–°–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å',
                                    switch_pm_parameter: 'hello',
                                })
                            } else {
                                ctx.answerInlineQuery(results, {
                                    cache_time: 0,
                                    switch_pm_text: '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
                                    switch_pm_parameter: 'hello1',
                                })
                            }
                        }
                    }
                }
            })
        } else {
            const fileWithVerifyPlayers = await fs.readFile('files/verifyPlayers.txt', 'utf-8')

            const verifyPLayers = fileWithVerifyPlayers.split('&()&')
            verifyPLayers.pop()

            const wasVerify = verifyPLayers.find(el => {
                const id = el.split('/')[0]
                    
                return ctx.update.inline_query.from.id === +id
            })

            if (wasVerify) {
                ctx.answerInlineQuery(leaderList, {
                    switch_pm_text: '–°–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å',
                    switch_pm_parameter: '002'
                })
            } else {
                ctx.answerInlineQuery(leaderList, {
                    switch_pm_text: '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', 
                    switch_pm_parameter: '01'
                })
            }
        }
    }

})

bot.action(/.+/, async ctx => {
    ctx.session = ctx.session || {}
    
    const callbackInfo = ctx.update.callback_query

    if (callbackInfo.data === 'verifyButton') {
        let playerInfo

        try {
            playerInfo = await client.getPlayer(ctx.session.accountTag)
        } catch(e) {
            console.log(e)
        }

        const finalColor = playerInfo.nameColor

        if (finalColor === ctx.session.startNickColor) {
            ctx.answerCbQuery('–ü–æ–∫–∞ —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –∑–∞–º–µ—Ç–∏–ª.\n\n–û–±—ã—á–Ω–æ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö –æ–∫–æ–ª–æ 1 –º–∏–Ω—É—Ç—ã, –ø–æ—ç—Ç–æ–º—É –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ –Ω–∞–∂–∞—Ç—å –µ—â—ë —Ä–∞–∑', { show_alert: true })
        } else {
            const shortPlayerInfo = {
                tag: playerInfo.tag,
                name: playerInfo.name,
                trophies: playerInfo.trophies,
                expLevel: playerInfo.expLevel,
            }

            const stringInfo = JSON.stringify(shortPlayerInfo)

            const file = await fs.readFile('files/verifyPlayers.txt', 'utf-8')

            const newVerifyUser = `${callbackInfo.from.id}/${stringInfo}&()&`
            const newData = file + newVerifyUser

            await fs.writeFile('files/verifyPlayers.txt', newData)

            ctx.telegram.sendMessage(callbackInfo.from.id, '–í—Å—ë –æ–∫! –¢–µ–ø–µ—Ä—å —è —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —Ç–≤–æ–π.\n\n–ù–µ –∑–∞–±—É–¥—å —Å–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –Ω–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ.\n\n–ê –≤–æ—Ç –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
                parse_mode: 'Markdown',
                reply_markup: { keyboard: menuButtons, resize_keyboard: true }
            })
            ctx.telegram.deleteMessage(callbackInfo.from.id, ctx.session.foundedAccountId)
        }
    } 
    
    if (callbackInfo.data === 'correctAccount') {
        const foundedAccountId = ctx.session.foundedAccountId

        await ctx.telegram.editMessageText(callbackInfo.from.id, foundedAccountId, foundedAccountId, '–ù–∞–π—Å! –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n\n–ó–∞–π–¥–∏ –≤ –∏–≥—Ä—É –∏ —Å–º–µ–Ω–∏ —Ü–≤–µ—Ç —Å–≤–æ–µ–≥–æ –Ω–∏–∫–∞ –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π. –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–µ—à—å —ç—Ç–æ, –≤–µ—Ä–Ω–∏—Å—å –∫–æ –º–Ω–µ –∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏', {
            parse_mode: 'Markdown',
        })
        await ctx.telegram.editMessageReplyMarkup(callbackInfo.from.id, foundedAccountId, foundedAccountId, { inline_keyboard: verifyButton } )
    } else {
        const array = callbackInfo.data.split('/')

        if (array[0] === 'acceptDuelBtn') {
            const file = await fs.readFile('files/duelsInfo.txt', 'utf-8')

            const duel = file.split(' ')

            const wasClicked = duel.find(el => {
                const creatorId = el.split('/')[0]
                
                return array[1] === creatorId
            })

            if (wasClicked) {
                ctx.answerCbQuery('–î—É—ç–ª—å —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞!', { show_alert: true })
            } else {
                if (array[0] === 'acceptDuelBtn' && callbackInfo.from.id + '' !== array[1]) {
                    const fileWithCreators = await fs.readFile('files/creators.txt', 'utf-8')
                        
                    const creatorsArray = fileWithCreators.split(' ')
                    creatorsArray.pop()
            
                    const correctIndex = creatorsArray.findIndex(el => {
                        return +array[1] === +el
                    })
            
                    if (correctIndex || correctIndex === 0) {
                        creatorsArray.splice(correctIndex, 1)
                    }
            
                    const newData = creatorsArray.join(' ')

                    await fs.writeFile('files/creators.txt', newData)

                    const file = await fs.readFile('files/verifyPlayers.txt', 'utf-8')

                    const verifyPLayers = file.split('&()&')
                    verifyPLayers.pop()

                    const wasVerify = verifyPLayers.find(el => {
                        const creatorId = el.split('/')[0]
                        
                        return callbackInfo.from.id === +creatorId
                    })

                    if (wasVerify) {
                        const file1 = await fs.readFile('files/linksToDuels.txt', 'utf-8')

                        const arrayWithLinks = file1.split(' ')
                        arrayWithLinks.pop()

                        const correctLink = arrayWithLinks.find(el => {
                            const creatorId = el.split('(*)')[0]
                            
                            return array[1] === creatorId
                        })

                        const justLink = correctLink.split('(*)')

                        ctx.telegram.sendMessage(+array[1], `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [${callbackInfo.from.first_name}](tg://user?id=${callbackInfo.from.id}) –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –¥—É—ç–ª—å.`, {
                            parse_mode: 'Markdown',
                        })

                        ctx.telegram.sendMessage(callbackInfo.from.id, `–¢—ã –ø—Ä–∏–Ω—è–ª –¥—É—ç–ª—å, –∑–∞—Ö–æ–¥–∏: ${justLink[1]}\n\n–£–¥–∞—á–∏ –≤ –¥—É—ç–ª–∏!`)
                        
                        const file = await fs.readFile('files/duelsInfo.txt', 'utf-8')

                        const newDuel = `${array[1]}/${callbackInfo.from.id} `
                        const newData = file + newDuel

                        await fs.writeFile('files/duelsInfo.txt', newData)

                        const fileWithLinks = await fs.readFile('files/linksToDuels.txt', 'utf-8')

                        const linksArray = fileWithLinks.split(' ')
                        linksArray.pop()

                        const correctLink1 = linksArray.findIndex(el => {
                            const id = el.split('(*)')[0]
                            return +array[1] === +id
                        })

                        if (correctLink1 || correctLink1 === 0) {
                            linksArray.splice(correctLink, 1)
                        }

                        const newData2 = linksArray.join(' ')

                        await fs.writeFile('files/linksToDuels.txt', newData2)
            
                        return
                    } else {
                        ctx.answerCbQuery('–í—ã –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!', { show_alert: true })
                    }
                }
        
                if (array[0] === 'acceptDuelBtn' && callbackInfo.from.id + '' === array[1]) {
                    ctx.answerCbQuery('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –¥—É—ç–ª—å!', { show_alert: true })
        
                    return
                }
            }
        }

        if (array[0] === 'notCorrectAccount') {
            ctx.telegram.deleteMessage(callbackInfo.from.id, ctx.session.foundedAccountId)
            ctx.telegram.sendMessage(callbackInfo.from.id, '–û–∫–µ–π, –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–≥ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è:')

            ctx.session.linkingAccount = true
        }
    }
})

bot.on('sticker', async ctx => {
    console.log(ctx.update.message)
})

bot.on('message', async ctx => {
    const messageInfo = ctx.update.message

    ctx.session = ctx.session || {}

    if (ctx.session.linkingAccount && ctx.session.linkingId === messageInfo.from.id) {
        ctx.session.linkingAccount = false

        let accountTag = messageInfo.text.toUpperCase()

        if (messageInfo.text.includes('https://link.brawlstars.com/invite/friend/')) {
            const tag = messageInfo.text.split('tag=')
            const finalTag = tag[1].split('&')

            accountTag = finalTag[0];
        }

        if (!messageInfo.text.startsWith('#')) {
            accountTag = '#' + accountTag
        }

        ctx.session.accountTag = accountTag

        let playerInfo = null

        try {
            playerInfo = await client.getPlayer(accountTag)
        } catch (e) {
            console.error('Player info error', e)
        }

        if (!playerInfo) {
            await ctx.telegram.sendMessage(messageInfo.from.id, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç. –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π, –ú–∏—à–∞, –≤—Å—ë —Ñ–∏–≥–Ω—è...\n\n–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–≥ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è:', {
                parse_mode: 'Markdown',
            })

            ctx.session.linkingAccount = true
        } else {
            ctx.session.linkingAccount = false

            const startNickColor = playerInfo.nameColor

            ctx.session.startNickColor = startNickColor

            if (startNickColor) {
                const foundedAccount = await ctx.telegram.sendMessage(messageInfo.from.id, `*–Ø –Ω–∞—à–µ–ª –∞–∫–∫–∞—É–Ω—Ç:*\n\n–¢–µ–≥: *${playerInfo.tag}*\n–ù–∏–∫: *${playerInfo.name}*\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–±–∫–æ–≤: *${playerInfo.trophies}*\n–£—Ä–æ–≤–µ–Ω—å: *${playerInfo.expLevel}*\n\n–í—Å—ë –≤–µ—Ä–Ω–æ, —ç—Ç–æ —Ç—ã?`, {
                    parse_mode: 'Markdown',
                    reply_markup: { inline_keyboard: correctAccount },
                })

                ctx.session.foundedAccountId = foundedAccount.message_id

                return
            }
        }
    } else {
        if (messageInfo.text === 'üéØ –°–æ–∑–¥–∞—Ç—å –¥—É—ç–ª—å') {
            const file = await fs.readFile('files/verifyPlayers.txt', 'utf-8')

            const verifyPLayers = file.split('&()&')
            verifyPLayers.pop()

            const wasVerify = verifyPLayers.find(el => {
                const Id = el.split('/')[0]
                        
                return messageInfo.from.id === +Id
            })

            if (wasVerify) {
                ctx.telegram.sendMessage(messageInfo.from.id, '–°–æ–∑–¥–∞–π –≤ –∏–≥—Ä–µ –¥—Ä—É–∂–µ—Å–∫–æ–µ –ª–æ–±–±–∏ –∏ –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–µ–≥–æ:')
            }

            ctx.session.link = true

            return
        }

        if (messageInfo.text === 'üìù –ò—Å—Ç–æ—Ä–∏—è –¥—É—ç–ª–µ–π') {
            const file = await fs.readFile('files/battleHistory.txt', 'utf-8')

            const battlesArray = file.split(' ')
            battlesArray.pop()

            const correctBattles = battlesArray.filter( el => el.includes(messageInfo.from.id) )

            const finalCorrectBattlesArray = correctBattles.slice(0, 5)

            let message = `*–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π:*\n\n`
            let number = 1

            finalCorrectBattlesArray.forEach(async (el, elIndex) => {
                const elements = el.split('/')

                const fileWithVerifyPlayers = await fs.readFile('files/verifyPlayers.txt', 'utf-8')

                const verifyPLayers = fileWithVerifyPlayers.split('&()&')
                verifyPLayers.pop()

                const wasVerify1 = verifyPLayers.find(el => {
                    const id = el.split('/')[0]
                        
                    return +elements[0] === +id
                })

                const wasVerify2 = verifyPLayers.find(el => {
                    const id = el.split('/')[0]
                    return +elements[1] === +id
                })

                let obj1 = wasVerify1.split('/')[1]
                let obj2 = wasVerify2.split('/')[1]

                obj1 = JSON.parse(obj1)
                obj2 = JSON.parse(obj2)

                const winner = elements[2] === '1' ? obj1 : obj2

                message = message + `${number}. [${obj1.name}](tg://user?id=${elements[0]}) vs [${obj2.name}](tg://user?id=${elements[1]}) ‚Äì –ø–æ–±–µ–¥–∏–ª ${winner.name}\n\n`
                number = number + 1

                if (finalCorrectBattlesArray.length - 1 === elIndex) {
                    await ctx.telegram.sendMessage(messageInfo.from.id, message, {
                        parse_mode: 'Markdown',
                    })
                }
            })
        }

        if (ctx.session.link) {
            let link1 = messageInfo.text

            if (messageInfo.text.includes('https://link.brawlstars.com/invite/gameroom/ru?tag=') && !link1.startsWith('https://link.brawlstars.com/invite/gameroom/ru?tag=')) {
                const link = messageInfo.text.split('! ')
                const finalLink = link[1]

                link1 = finalLink
            }

            if (link1.startsWith('https://link.brawlstars.com/invite/gameroom/ru?tag=')) {
                const file = await fs.readFile('files/creators.txt', 'utf-8')
        
                const creatorsArray = file.split(' ')
                creatorsArray.pop()
        
                const correctCreator = creatorsArray.find(el => messageInfo.from.id === +el)

                if (!correctCreator) {
                    const file = await fs.readFile('files/creators.txt', 'utf-8')

                    const newData = file + `${messageInfo.from.id} `

                    await fs.writeFile('files/creators.txt', newData)

                    ctx.telegram.sendMessage(
                        messageInfo.from.id,
                        '–î—É—ç–ª—å —Å–æ–∑–¥–∞–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –≤ –ª—é–±–æ–π —á–∞—Ç –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ _@BrawlDuelsBot_ –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏ –∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –º–µ–Ω—é',
                        {
                            parse_mode: 'Markdown',
                        }
                    )
 
                    const file1 = await fs.readFile('files/linksToDuels.txt', 'utf-8')

                    const newData1 = file1 + `${messageInfo.from.id}(*)${link1} `

                    await fs.writeFile('files/linksToDuels.txt', newData1)

                    ctx.session.link = false
                }
            } else {
                ctx.telegram.sendMessage(messageInfo.from.id, '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞! –í–≤–µ–¥–∏—Ç–µ cc—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ:')

                ctx.session.link = true
            }

            return
        }
    }
})

bot.launch()

module.exports = {
    bot,
    client,
}